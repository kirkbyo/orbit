/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ActionLogID = string & {
  __actionLogIDOpaqueType: null;
};
export type ActionLog =
  | IngestActionLog
  | RepetitionActionLog
  | RescheduleActionLog
  | UpdateMetadataActionLog;

export interface OrbitAPISchema {
  "/actionLogs": ActionLogHTTPSchema;
}
export interface ActionLogHTTPSchema {
  GET: {
    query: {
      limit?: number;
      createdAfterID?: ActionLogID;
    };
    response: BaseResponseList & {
      data: {
        objectType: "actionLog";
        id: ActionLogID;
        data: ActionLog;
      };
    };
  };
  PATCH: {
    body: {
      id: ActionLogID;
      data: ActionLog;
    }[];
    response: null;
  };
}
export interface BaseResponseList {
  objectType: "list";
  hasMore: boolean;
}
export interface IngestActionLog {
  timestampMillis: number;
  taskID: string;
  actionLogType: "ingest";
  provenance: TaskProvenance | null;
}
export interface TaskProvenance {
  provenanceType: "anki" | "web" | "note";
  /**
   * A unique identifier which specifies the source of this task relative to the provenanceType. For instance, for a task imported from Anki, this would be the Anki card ID.
   */
  externalID: string;
  modificationTimestampMillis: number | null;
  title: string | null;
  url: string | null;
}
export interface RepetitionActionLog {
  timestampMillis: number;
  taskID: string;
  actionLogType: "repetition";
  taskParameters:
    | {
        [k: string]: unknown;
      }
    | number
    | null;
  outcome: string;
  context: string | null;
}
export interface RescheduleActionLog {
  timestampMillis: number;
  taskID: string;
  actionLogType: "reschedule";
  parentActionLogIDs: ActionLogID[];
  newTimestampMillis: number;
}
export interface UpdateMetadataActionLog {
  timestampMillis: number;
  taskID: string;
  actionLogType: "reschedule";
  parentActionLogIDs: ActionLogID[];
  updates: {
    isDeleted?: boolean;
    provenance?: TaskProvenance;
  };
}
